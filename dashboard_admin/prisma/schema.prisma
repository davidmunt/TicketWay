generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  DRAFT
  PENDING
  ACCEPTED
  APPROVED
  CANCELLED
  COMPLETED
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TicketStatus {
  VALID
  USED
  CANCELLED
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String   @unique
  username  String   @unique
  email     String   @unique
  bio       String   @default("(vacio)")
  image     String   @default("https://static.productionready.io/images/smiley-cyrus.jpg")
  isActive  Boolean  @default(true)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artist {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  slug         String     @unique
  name         String
  nationality  String
  description  String
  images       String[]   @default([])
  categories   String[]   @db.ObjectId @default([])
  status       Status     @default(PENDING)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Venue {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  slug         String    @unique
  name         String
  country      String
  city         String
  direction    String
  description  String
  images       String[]  @default([])
  capacity     Int
  status       Status    @default(PENDING) 
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  slug        String     @unique
  name        String
  description String
  image       String
  concerts    String[]   @db.ObjectId @default([])
  status      Status     @default(PENDING)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Concert {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  slug            String    @unique
  name            String
  date            DateTime
  price           Float
  description     String
  images          String[]  @default([])
  venue           String    @db.ObjectId
  category        String    @db.ObjectId
  artists         String[]  @db.ObjectId  @default([])
  comments        String[]  @db.ObjectId  @default([])
  favoritesCount  Int       @default(0)
  availableSeats  Int       @default(0)
  status          Status    @default(PENDING)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  author    String   @db.ObjectId
  concert   String   @db.ObjectId
  status    Status   @default(APPROVED)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  artist          String     @db.ObjectId
  concert         String     @db.ObjectId
  name            String
  description     String
  productCategory String     @db.ObjectId
  price           Float
  stockTotal      Int        @default(0)
  stockAvailable  Int        @default(0)
  imageUrl        String     
  status          Status     @default(PENDING)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model ProductCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  slug        String     @unique
  name        String
  description String
  image       String
  status      Status     @default(PENDING)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    String[]   @db.ObjectId @default([])
}


model TicketType {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  concert         String    @db.ObjectId
  name            String
  price           Float
  stockTotal      Int
  stockAvailable  Int
  status          Status     @default(PENDING)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model TicketOrder {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  user         String      @db.ObjectId
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  order         String   @db.ObjectId 
  ticketType    String   @db.ObjectId 
  quantity      Int
  unitPrice     Float
  subtotal      Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  order           String   @db.ObjectId 
  amount          Float
  method          String
  transactionRef  String
  currency        String   @default("USD")
  status          PaymentStatus @default(PENDING)
  paidAt          DateTime?
  createdAt       DateTime @default(now())
}

model OrderProductItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       String   @db.ObjectId 
  product     String   @db.ObjectId 
  quantity    Int
  unitPrice   Float
  subtotal    Float  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  orderItem     String       @db.ObjectId 
  user          String       @db.ObjectId 
  concert       String       @db.ObjectId
  ticketType    String       @db.ObjectId  
  uniqueCode    String       @unique  
  status        TicketStatus @default(VALID)
  issuedAt      DateTime     @default(now()) 
  usedAt        DateTime?   
}

model RefreshToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  userId     String   @db.ObjectId
  expiryDate DateTime
  createdAt  DateTime @default(now())
}

model RefreshBlacklist {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  token        String   @unique
  userId       String   @db.ObjectId
  expiryDate   DateTime
  blacklistedAt DateTime @default(now())
}
